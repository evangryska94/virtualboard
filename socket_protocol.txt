//initialization

//==========
//client to server (pre-game)
//==========
//TODO: maybe there is a general chat for people not yet in a lobby

{
	"type" : "initJoin",
	"data" : {
		"name" : "fred",
		"color" : [
			0,
			255,
			0
		],
		"gameID" : 2,
		"password" : "12345"
	}
}

{
	"type" : "initHost",
	"data" : {
		"name" : "sam",
		"color" : [
			255,
			0,
			0
		],
		"gameName" : "coolville",
		"password" : "12345"
	}
}

{
	"type" : "listGames",
}

{
	"type" : "gameIDExists",
	"data" : {
		"gameID" : 6,
	}
}

{
	"type" : "ping",

	//data can be literally anything
	"data" : {
		"msg" : "sequence number or something"
	}
}

//==========
//server to client (pre-game)
//==========

{
	"type" : "initSuccess",
	"data" : {
		"gameName" : "coolville",
		"gameID" : 3,
		"users" : [
			{
				"user" : 0,
				"name" : "sam",
				"color" : [
					255,
					0,
					0
				],
				"host" : 1,
				"local" : 0
			},
			{
				"user" : 3,
				"name": "fred",
				"color" : [
					0,
					255,
					0
				],
				"host" : 0,
				"local" : 1
			}
		],
		"board" : {
			"background" : "/res/img/background.png",

			"privateZones" : [
				{
					//private zone ids are different from piece ids
					"id" : 1,

					"pos" : [
						5.426,
						-7.234
					],
					"size" : [
						2,
						5
					],
					"r" : 0,
					"color" : [
						255,
						0,
						0
					]
				}
			],

			//note: piece array is ordered with bottom element first, and top element last
			"pieces" : [
				//data is identical to pieceAdd data
				{
					"pos" : [
						5.734,
						3.64
					],
					"piece" : 5,
					"icon" : "static/img/crown.png",
					"color" : [
						255,
						0,
						0
					],
					"static" : 0,
					"r" : 3.14159,
					"s" : 1.0,

					//optional parameter only preset if piece is a die
					"diceData" : {
						//max might not be equal to len(faces)
						//this shouldn't be used on the client side for much
						"max" : 6,

						//when rolled, sets the "icon" field to diceData[faces][value] unless value is out of bounds
						//in that case, pick from default dice faces
						"faces" : [
							"/res/dice1.png",
							"/res/dice2.png",
							"/res/dice3.png",
							"/res/dice4.png",
							"/res/dice5.png",
							"/res/dice6.png"
						]
					},

					//optional parameter only present if piece is a card or deck
					"cardData" : {
						//optional parameter which defaults to 1 (single card)
						"count" : 52
					}
				}
			]
		}
	}
}

{
	"type" : "initFailure",
	"data" : {
		"msg" : "wrong password"
	}
}

{
	"type" : "listGames",
	"data" : [
		{
			"id" : 2,
			"name" : "coolville",
			"players" : 1,
			"password" : 1
		}
	]
}

{
	"type" : "gameIDExists",
	"data" : {
		"gameIDExists" : 0,
		"name" : "FarmVille",
		"password" : "32asfPwd"
	}
}

{
	"type" : "pong",
	"data" : [
		//data can be literally anything
		{
			"seq" : 5235
		}
	]
}

{
	"type" : "error",
	"data" : [
		{
			"msg" : "bad input"
		}
	]
}

//TODO: retexturing?

//==========
//server to client protocol
//==========

{
	"type" : "chat",
	"data" : [
		{
			"user" : 1,
			"time" : 802983477.643, //seconds since epoc
			"msg" : "actual text here"
		},
		{
			"user" : 2,
			"time" : 802983477.648,
			"msg" : "more actual text here"
		}
	]
}

//pinging the board at a position to notify other users
//maybe we add different kinds of pings in the future (!, ?, X, etc)
{
	"type" : "beacon",
	"data" : [
		{
			"user" : 1,
			"pos" : [
				54.352,
				65.454
			]
		}
	]
}

{
	"type" : "pieceTransform",

	//alternatively, the following shorthand is acceptable
	"type" : "pt",

	//optionally, a user may be specified at this top level which would then be used for all following pieces
	//	the functions handling the socket api should propogate this field to all entries in the data array
	//	before passing the json data on to other functions
	//	(not implemented yet)
	"u" : 4,

	"data" : [
		{
			"piece" : 3,
			"user" : 4,

			//alternatively to the two parameters above, the following can be used instead
			//	the functions handling the socket api should immediately convert to the expanded version
			//	before passing the json data on to other functions
			"p" : 3,
			"u" : 4

			//optional parameters
			"icon" : "/res/img.png",
			"color" : [
				255,
				255,
				255
			],
			"pos" : [
				6.98721345,
				90.6532
			],
			"r" : 0.45656,
			"s" : 1.0,
			"static" : 0
		}
	]
}

{
	"type" : "pieceAdd",
	"data" : [
		{
			"piece" : 6,
			"user" : 4,
			"icon" : "/res/img.png",
			"static" : 0,
			"color" : [
				255,
				255,
				255
			],
			"pos" : [
				6.6435,
				65.2543
			],
			"r" : 0.45656,
			"s" : 1.0,

			//optional parameter only preset if piece is a die
			"diceData" : {
				//max might not be equal to len(faces)
				//this shouldn't be used on the client side for much
				"max" : 6,

				//when rolled, sets the "icon" field to diceData[faces][value] if it is in bounds
				//if it is not in bounds, pick from default dice images
				"faces" : [
					"/res/dice1.png",
					"/res/dice2.png",
					"/res/dice3.png",
					"/res/dice4.png",
					"/res/dice5.png",
					"/res/dice6.png"
				]
			},

			//optional parameter only present if piece is a card or deck
			"cardData" : {
				//clients only get to see size of deck
				//this parameter is optional and defaults to 1
				"count" : 52
			}
		}
	]
}

{
	"type" : "pieceRemove",
	"data" : [
		{
			"piece" : 6,
			"user" : 4
		}
	]
}

//REMOVED: Use pieceTransform instead
// {
//	"type" : "toggleStatic",
//	"data" : [
//		{
//			"user" : 2,
//			"piece" : 6
//		}
//	]
// }

{
	"type" : "setBackground",
	"data" : {
		"user" : 2,
		"icon" : "/res/img/background.png"
	}
}

{
	"type" : "clearBoard"
}

{
	"type" : "userConnect",
	"data" : [
		{
			"user" : 5,
			"name" : "phil",
			"color" : [
				255,
				0,
				0
			]
		}
	]
}

{
	"type" : "userDisconnect",
	"data" : [
		{
			"user" : 5,
			"msg" : "lost connection"
		}
	]
}

{
	"type" : "changeColor",
	"data" : [
		{
			"user" : 5,
			"color" : [
				0,
				255,
				0
			]
		}
	]
}

//this one doesn't use array format since only last one matters
{
	"type" : "changeHost",
	"data" : {
		"user" : 2,
		"msg" : "previous host disconnected"
	}
}

{
	"type" : "announcement",
	"data" : [
		{
			"msg" : "words go here"
		}
	]
}

{
	"type" : "listClients",
	"data" : [
		{
			"user" : 0,
			"name" : "sam",
			"host" : 1,
			"local" : 0,
			"color" : [
				255,
				0,
				0
			]
		},
		{
			"user" : 3,
			"name": "fred",
			"host" : 0,
			"local" : 1,
			"color" : [
				255,
				0,
				255
			]
		}
	]
}

//Special objet control

{
	"type" : "rollDice",
	"data" : [
		{
			"user" : 2,
			//piece id refers to a piece that is hopefully a dice type
			"piece" : 12,

			//when rolled, sets the "icon" field to diceData[faces][value - diceData[min]] unless value is out of bounds
			"result" : 6
		}
	]
}

//decks can also be flippsed
{
	"type" : "flipCard",
	"data" : [
		{
			"user" : 2,
			"piece" : 5,
			"icon" : "/static/img/card/spades/7_of_spaces.png"
		}
	]
}

//REMOVED: use pieceAdd instead with the "cardData" attribute
//drawing cards from/adding cards to a deck will cause the piece corresponding to that card to be created/removed
//{
//	"type" : "createDeck",
//	"data" : [
//		{
//			"pieceData" : {
//				"piece" : 6,
//				"user" : 4,
//				"icon" : "/res/deckicon.png",
//				"static" : 0,
//				"color" : [
//					255,
//					255,
//					255
//				],
//				"pos" : [
//					6.6435,
//					65.2543
//				],
//				"r" : 0.45656,
//				"s" : 1.0,
//				"cards" : [
//					"/static/img/cards/hearts/queen_of_hearts.png",
//					"/static/img/cards/clubs/2_of_clubs/clubs.png",
//					"/static/img/cards/spades/9_of_spades.png",
//					"/static/img/cards/diamonds/king_of_diamonds.png"
//				]
//			}
//		}
//	]
//}

//this will be accompanied by a pieceAdd/pieceRemove command usually to create/delete the single card
//maybe this should include an optional icon parameter if the icon of the deck also changes
{
	"type" : "changeDeckCount",
	"data" : [
		{
			"user" : 2,

			//piece id of deck
			"piece" : 7,
			"count" : 51
		}
	]
}

{
	"type" : "shuffleDeck",
	"data" : [
		{
			"user" : 2,
			"piece" : 7,

			//the new icon on top of the deck as a result of the shuffle
			"icon" : "/res/cardback.png"
		}
	]
}

//TODO: private zones
{
	"type" : "createPrivateZone",
	"data" : [
		{
			"id" : 8,
			"user" : 4,
			"color" : [
				255,
				0,
				0
			],
			"pos" : [
				1.045,
				-8.53
			],
			"size" : [
				7,
				2
			],
			"r" : 3.14159265
		}
	]
}

{
	"removePrivateZone",
	"data" : [
		{
			"user" : 2,
			"id" : 3 //id of private zone
		}
	]
}

//REMOVED, INSTEAD JUST REMOVE AND CREATE NEW ZONE
//{
//	"type" : "transformPrivateZone",
//	"data" : [
//		{
//			"user" : 4,
//			"id" : 8,
//
//			//optional parameters
//			"color" : [
//				255,
//				0,
//				0
//			],
//			"pos" : [
//				1.045,
//				-8.53
//			],
//			"size" : [
//				7,
//				2
//			],
//			"r" : 3.14159265
//		}
//	]
//}

{
	"type" : "drawScribble",
	"data" : [
		{
			"user" : 4,
			"ttl" : 10,
			"points" : [
				[
					-6.573456,
					1.54352
				],
				[
					-6.4652,
					1.462453
				],
				[
					-6.4642,
					1.41877
				]
			]
		}
	]
}

//==========
//client to server protocol
//==========

{
	"type" : "chat",
	"data" : [
		{
			"msg" : "actual text here"
		}
	]
}

{
	"type" : "beacon",
	"data" : [
		{
			"pos" : [	
				54.5435,
				0.534
			]
		}
	]
}

//maybe we remove toggleStatic and just make it a field in pieceTransform?
//additionally, we can make it so color changes are managed here
{
	"type" : "pieceTransform",

	"data" :  [
		{
			"piece" : 3,

			//alternatively to the piece parameter above, the following can be used instead
			//	the functions handling the socket api should immediately convert to the expanded version
			//	before passing the json data on to other functions
			"p" : 3,

			//optional parameters
			"icon" : "/res/img.png",
			"pos" : [
				6.98721345,
				90.6532
			],
			"r" : 0.45656,
			"s" : 1.0,
			"color" : [
				0,
				0,
				0
			],
			"static" : 1
		}
	]
}

//TODO: piece pickup/drop?
//alternatively we can just have clients infer pickup/drop based on piece movement
//and have some timeout for the highlight to go away

{
	"type" : "pieceAdd",
	"data" : [
		{
			"icon" : "/res/img.png",
			"pos" : [
				6.6435,
				65.2543
			],
			"color" : [
				255,
				255,
				255
			],
			"r" : 0.45656,
			"s" : 1.0,
			"static" : 0,

			//optional parameter only preset if piece is a die
			"diceData" : {
				//sets the range of values for the die
				//if there are not enough face icons provided, defaults will be used
				//maximum value of faceCount is currently 24
				//this should be changed to 100 for percentiles probably
				"max" : 6,

				//when rolled, sets the "icon" field to diceData[faces][value] unless value is out of bounds
				//in that case, pick from default dice faces
				"faces" : [
					"/res/dice1.png",
					"/res/dice2.png",
					"/res/dice3.png",
					"/res/dice4.png",
					"/res/dice5.png",
					"/res/dice6.png"
				]
			},

			//optional parameter only present if piece is a deck
			//the data["icon"] field is used as the default back icon
			"cardData" : {

				//optional parameter that will be assumed to be 1 if absent
				"count" : 2,

				//if count is greater than len(cards), default cards will be used
				//cards are ordered from bottom to top
				"cards" : [
					{
						//cards within a deck can be facing either way
						"faceDown" : 1,

						"icon" : "/static/img/queenhearts.png",

						//optional parameter, piece.icon will be used instead if absent
						"back" : "/static/img/cardback.png"
					}, {
						"faceDown" : 1,
						"icon" : "/static/img/aceclubs.png",
						"back" : "/static/img/cardback.png"
					}
				]
			}
		}
	]
}

{
	"type" : "pieceRemove",
	"data" : [
		{
			"piece" : 6,
		}
	]
}

//maybe make this part of pieceTransform instead of an independent command
//REMOVED, see above comment
//{
//	"type" : "toggleStatic",
//	"data" : [
//		{
//			"piece" : 6
//		}
//	]
//}

//maybe this should be host only
{
	"type" : "setBackground",
	"data" : {
		"icon" : "/res/img/background.png"
	}
}

{
	"type" : "disconnect",
	"data" : {
		"msg" : "brb food"
	}
}

{
	"type" : "listClients"
}

{
	"type" : "changeColor",
	"data" : {
		"color" : [
			0,
			255,
			0
		]
	}
}

//special objects

{
	"type" : "rollDice",
	"data" : [
		{
			//piece id refers to a piece that is hopefully a dice type
			"piece" : 12,
		}
	]
}

//this command works on cards/decks
{
	"type" : "flipCard",
	"data" : [
		{
			"piece" : 5
		}
	]
}

//REMOVED: use pieceAdd instead with the "deckData" attribute
//drawing cards from/adding cards to a deck will cause the piece corresponding to that card to be removed
//{
//	"type" : "createDeck",
//	"data" : [
//		{
//			"icon" : "/res/deckicon.png",
//			"color" : [
//				255,
//				255,
//				255
//			],
//			"pos" : [
//				6.6435,
//				65.2543
//			],
//			"r" : 0.45656,
//			"s" : 1.0,
//			"static" : 0
//		}
//	]
//}

//moves a card piece from the board into a deck
{
	"type" : "addCardToDeck",
	"data" : [
		{
			//piece id of receiving deck
			"deck" : 7,

			//piece id of moved card/deck
			"card" : 3
		}
	]
}

//REMOVED: meh
//adds a card type to the deck directly, without referencing a card piece on the board
//{
//	"type" : "addCardTypeToDeck",
//	"data" : [
//		{
//			"deck" : 7,
//			"card" : "/res/kingclubs.png"
//		}
//	]
//}

//typically, removing a card is then followed up immediately by the following:
// 1. A change
// 2. A "pieceAdd" message from the server to actually spawn the card
{
	"type" : "drawCard",
	"data" : [
		{
			//piece id of deck
			"piece" : 7,

			//optional parameter, specifies the rotation of the client's camera
			//drawn piece will be spawned below the deck relative to the client if possible
			//0 is to the right, going counter clockwise
			"cameraRotation" : 3.14159
		}
	]
}

{
	"type" : "shuffleDeck",
	"data" : [
		{
			"piece" : 7
		}
	]
}

//TODO: private zones
{
	"type" : "createPrivateZone",
	"data" : [
		{
			"color" : [
				255,
				0,
				0
			],
			"pos" : [
				1.045,
				-8.53
			],
			"size" : [
				7,
				2
			],
			"r" : 3.14159265
		}
	]
}

{
	"removePrivateZone",
	"data" : [
		{
			"id" : 3 //id of private zone
		}
	]
}

//scribbles will not be saved by the server and exist only temporarily.
//we can add support for having scribbles stay indefinitely (ttl of -1)
//but if someone new joins they will not see previous scribbles
{
	"type" : "drawScribble",
	"data" : [
		{
			"ttl" : 10,
			"points" : [
				//first index is x, second is y
				//this seems better than { "x" : 5.364, "y" : 77.76}
				[
					-6.573456,
					1.54352
				],
				[
					-6.4652,
					1.462453
				],
				[
					-6.4642,
					1.41877
				]
			]
		}
	]
}




//==========
//host only client to server commands
//==========
//maybe these can be made into array formats for consistency with other protocols

{
	"type" : "changeHost",
	"data" : {
		"user" : 2,
		"msg" : "he paid me $5 to make him host"
	}
}

{
	"type" : "announcement",
	"data" : {
		"msg" : "this is important"
	}
}

{
	"type" : "changeServerInfo",
	"data" : {
		"name" : "coolville 2",
		"password" : "542512"
	}
}

{
	"type" : "kickUser",
	"data" : {
		"user" : 1,
		"msg" : "stop scribbling everywhere"
	}
}

{
	"type" : "clearBoard"
}

{
	"type" : "closeServer"
}

//this will add a set of pieces and private zones to the existing board state
//host can clear the board first if desired
{
	"type" : "loadBoardState",
	"data" : {
		"background" : "/res/img/background.png",
		"privateZones" : [
			{
				"pos" : [
					5.426,
					-7.234
				],
				"size" : [
					2,
					5
				],
				"r" : 0,
				"color" : [
					255,
					0,
					0
				]
			}
		],
		//Identical to data field from client to server addPiece command
		"pieces" : [
			{
				"pos" : [
					5.734,
					3.64
				],
				"icon" : "static/img/crown.png",
				"color" : [
					255,
					0,
					0
				],
				"static" : 0,
				"r" : 3.14159,
				"s" : 1.0,

				//optional parameter only preset if piece is a die
				"diceData" : {
					//sets the range of values for the die
					//if there are not enough face icons provided, defaults will be used
					//maximum value of faceCount is currently 24
					//this should be changed to 100 for percentiles probably
					"max" : 6,

					//when rolled, sets the "icon" field to diceData[faces][value] unless value is out of bounds
					//in that case, pick from default dice faces
					"faces" : [
						"/res/dice1.png",
						"/res/dice2.png",
						"/res/dice3.png",
						"/res/dice4.png",
						"/res/dice5.png",
						"/res/dice6.png"
					]
				},

				//optional parameter only present if piece is a deck
				//the data["icon"] field is used as the default back icon
				"cardData" : {

					//optional parameter that will be assumed to be 1 if absent
					"count" : 2,

					//if count is greater than len(cards), default cards will be used
					//cards are ordered from bottom to top
					"cards" : [
						{
							//cards within a deck can be facing either way
							"faceDown" : 1,

							"icon" : "/static/img/queenhearts.png",

							//optional parameter, piece.icon will be used instead if absent
							"back" : "/static/img/cardback.png"
						}, {
							"faceDown" : 1,
							"icon" : "/static/img/aceclubs.png",

							//note that if a back icon is provided for the final card
							//that icon will be seen instead of piece.icon (assuming last card is face down)
							"back" : "/static/img/cardback.png"
						}
					]
				}
			}
		]
	}
}



